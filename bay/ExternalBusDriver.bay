/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Backend;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.IntrospectionClass;
use Runtime.RuntimeUtils;
use Runtime.Core.ApiException;
use Runtime.Core.BusDriverInterface;
use Runtime.Core.CoreDriver;
use Runtime.Core.Message;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Backend.ApiContainer;
use Runtime.Web.Backend.ApiList;
use Runtime.Web.Backend.ApiMethod;


class ExternalBusDriver extends CoreDriver implements BusDriverInterface
{
	
	Collection<ApiMethod> api_methods = null;
	
	
	/**
	 * Start driver
	 */
	public async void startDriver()
	{
		this.api_methods = static::getApiMethodsByEntities(@.entities);
	}
	
	
	
	/**
	 * Send message
	 * @return string
	 */
	async void sendMessage(Message msg)
	{
	}
	
	
	
	/**
	 * Send message
	 * @return string
	 */
	async RemoteCallAnswer remoteBusCall(RemoteCallRequest request)
	{
		RemoteCallAnswer answer = new RemoteCallAnswer
		{
			"object_name": request.object_name,
			"interface_name": request.interface_name,
			"method_name": request.method_name,
		};
		
		string app_name = request.app_name;
		
		/* Check correct app name */
		if (app_name != "self" and app_name != @.main_module)
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new ApiException
				(
					_("Runtime", "Wrong app name"),
					rtl::ERROR_API_WRONG_APP_NAME
				)
			);
			
			return answer;
		}
		
		/* Find api method */
		ApiMethod api_method = this.findApiMethod(request);
		if (api_method == null)
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new ApiException
				(
					_("Runtime", "Api not found"),
					rtl::ERROR_API_NOT_FOUND
				)
			);
			
			return answer;
		}
		
		/* Get api method */
		string class_name = api_method.class_name;
		string class_method_name = api_method.class_method_name;
		
		/* Check if method exists */
		if (not rtl::method_exists(class_name, class_method_name))
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new ApiException
				(
					_("Runtime", "Api found but method does not exists"),
					rtl::ERROR_API_NOT_FOUND
				)
			);
			
			return answer;
		}
		
		/* Call api */
		try
		{
			fn f = rtl::method(class_name, class_method_name);
			list res = await f(request, answer);
			answer = res[1];
		}
		catch (ApiException e)
		{
			/* Set exception */
			answer = answer::exception(answer, e);
		}
		catch (RuntimeException e)
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new ApiException
				(
					e.getErrorMessage(),
					rtl::ERROR_FATAL
				)
			);
		}
		
		return answer;
	}
	
	
	
	/**
	 * Find api method
	 */
	ApiMethod findApiMethod(RemoteCallRequest request)
	{
		Collection<ApiMethod> api_methods = this.api_methods;
		string object_name = request.object_name;
		string interface_name = request.interface_name;
		string method_name = request.method_name;
		for (int i=0; i<api_methods.count(); i++)
		{
			ApiMethod api_method = api_methods[i];
			if
			(
				api_method.object_name == object_name and
				api_method.interface_name == interface_name and
				api_method.method_name == method_name
			)
			{
				return api_method;
			}
		}
		return null;
	}
	
	
	
	/**
	 * Returns api methods
	 */
	pure Collection<ApiMethod> getApiMethodsByEntities(Collection<BaseStruct> entitites)
	{
		Collection<ApiList> api_lists = entitites.filter( lib::isInstance(classof ApiList) );
		
		Vector<BaseStruct> api_methods = new Vector();
		api_methods.appendVector( entitites.filter(lib::isInstance( classof ApiMethod )) );
		
		for (int i=0; i<api_lists.count(); i++)
		{
			ApiList api_list = api_lists.item(i);
			string class_name = api_list.className();
			if (class_name == "") continue;
			
			Collection<ApiMethod> arr = static::getApiMethodsByClassName(class_name)
			arr = arr.map
			(
				ApiMethod (ApiMethod item) use (api_list) => item.copy
				{
					"object_name": api_list.object_name,
					"interface_name": (api_list.interface_name != "") ? api_list.interface_name : item.interface_name,
				}
			);
			api_methods.appendVector(arr);
		}
		
		return api_methods.toCollection();
	}
	
	
	
	/**
	 * Returns api methods by class name
	 */
	pure Collection<ApiMethod> getApiMethodsByClassName(string class_name)
	{
		Vector<ApiMethod> api_methods = new Vector<ApiMethod>();
		IntrospectionClass class_info = RuntimeUtils::getClassIntrospection(class_name);
		
		/* Get routes info */
		class_info.methods.each
		(
			void (Collection<ApiMethod> annotations, string class_method_name) use (api_methods, class_name)
			{
				annotations.each
				(
					void (ApiMethod api_method) use (api_methods, class_name, class_method_name)
					{
						if (api_method == null) return;
						if (api_method instanceof ApiMethod)
						{
							api_methods.push
							(
								api_method.copy
								{
									"class_name": class_name,
									"class_method_name": class_method_name,
								}
							);
						}
					}
				);
			}
		);
		
		return api_methods.toCollection();
	}
}