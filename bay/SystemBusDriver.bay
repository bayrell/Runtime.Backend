/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Backend;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.IntrospectionClass;
use Runtime.IntrospectionInfo;
use Runtime.RuntimeUtils;
use Runtime.Core.ApiException;
use Runtime.Core.BusDriverInterface;
use Runtime.Core.CoreDriver;
use Runtime.Core.Message;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Exceptions.FileNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Backend.BusList;
use Runtime.Backend.BusMethod;
use Runtime.Backend.BusMiddleware;


class SystemBusDriver extends CoreDriver implements BusDriverInterface
{
	
	Collection<BusMethod> bus_methods = null;
	
	
	/**
	 * Start driver
	 */
	public async void startDriver()
	{
		this.bus_methods = static::getBusMethodsByEntities(@.entities);
	}
	
	
	
	/**
	 * Send message
	 * @return string
	 */
	async void sendMessage(Message msg)
	{
	}
	
	
	
	/**
	 * Send message
	 * @return string
	 */
	async RemoteCallAnswer remoteBusCall(RemoteCallRequest request)
	{
		RemoteCallAnswer answer = new RemoteCallAnswer
		{
			"object_name": request.object_name,
			"interface_name": request.interface_name,
			"method_name": request.method_name,
		};
		
		string app_name = request.app_name;
		
		/* Set app name */
		answer <= app_name <= @.app_name;
		
		/* Check correct app name */
		if (app_name != "self" and app_name != @.app_name)
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new FileNotFound
				(
					app_name,
					_("Runtime", "App"),
					rtl::ERROR_API_WRONG_APP_NAME
				)
			);
			
			/* Set 404 code */
			answer <= new_http_code <= 404;
			
			return answer;
		}
		
		/* Find api method */
		BusMethod api_method = this.findBusMethod(request);
		if (api_method == null)
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new FileNotFound
				(
					request.object_name ~ "::" ~ request.interface_name ~ "::" ~ request.method_name,
					_("Runtime", "Api or method"),
					rtl::ERROR_API_NOT_FOUND
				)
			);
			
			/* Set 404 code */
			answer <= new_http_code <= 404;
			
			return answer;
		}
		
		/* Get api method */
		string class_name = api_method.class_name;
		string class_method_name = api_method.class_method_name;
		
		/* Check if method exists */
		if (not rtl::method_exists(class_name, class_method_name))
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new FileNotFound
				(
					request.object_name ~ "::" ~ request.interface_name ~ "::" ~ request.method_name,
					_("Runtime", "Method"),
					rtl::ERROR_API_NOT_FOUND
				)
			);
			
			/* Set 404 code */
			answer <= new_http_code <= 404;
			
			return answer;
		}
		
		/* Call api */
		try
		{
			/* Middleware */
			list res = await static::callMiddleware(request, answer, class_name, class_method_name);
			request = res[0];
			answer = res[1];
			
			fn f = rtl::method(class_name, class_method_name);
			list res = await f(request, answer);
			answer = res[1];
		}
		catch (ApiException e)
		{
			/* Set exception */
			answer = answer::exception(answer, e);
		}
		catch (RuntimeException e)
		{
			/* Set exception */
			answer = answer::exception
			(
				answer,
				new ApiException
				(
					e.getErrorMessage(),
					rtl::ERROR_FATAL
				)
			);
		}
		
		return answer;
	}
	
	
	
	/**
	 * Render chain
	 * Call route middlewares
	 */
	static async list callMiddleware
	(
		RemoteCallRequest request, RemoteCallAnswer answer,
		string class_name, string class_method_name
	)
	{
		Collection<BusMiddleware> middlewares = [];
		
		/* Get middleware from class */
		fn getMethodInfoByName = rtl::method(class_name, "getClassInfo");
		IntrospectionInfo info = getMethodInfoByName();
		middlewares = middlewares.concatIm
		(
			info.annotations.filter( lib::isInstance(classof BusMiddleware) )
		)
		
		/* Get middleware from method */
		fn getMethodInfoByName = rtl::method(class_name, "getMethodInfoByName");
		IntrospectionInfo info = getMethodInfoByName(class_method_name);
		middlewares = middlewares.concatIm
		(
			info.annotations.filter( lib::isInstance(classof BusMiddleware) )
		);
		
		/* Run each middleware */
		for (int i=0; i<middlewares.count(i); i++)
		{
			BusMiddleware m = middlewares.item(i);
			Collection arr = rs::split("::", m.value);
			string m_class_name = arr.get(0, "");
			string m_method_name = arr.get(1, "");
			fn f = rtl::method(m_class_name, m_method_name);
			
			/* Run method */
			list res = await f(request, answer);
			request = res[0];
			answer = res[1];
		}
		
		return [ request, answer ];
	}
	
	
	
	/**
	 * Find api method
	 */
	BusMethod findBusMethod(RemoteCallRequest request)
	{
		Collection<BusMethod> bus_methods = this.bus_methods;
		string object_name = request.object_name;
		string interface_name = request.interface_name;
		string method_name = request.method_name;
		for (int i=0; i<bus_methods.count(); i++)
		{
			BusMethod api_method = bus_methods[i];
			if
			(
				api_method.object_name == object_name and
				api_method.interface_name == interface_name and
				api_method.method_name == method_name
			)
			{
				return api_method;
			}
		}
		return null;
	}
	
	
	
	/**
	 * Returns api methods
	 */
	pure Collection<BusMethod> getBusMethodsByEntities(Collection<BaseStruct> entitites)
	{
		Collection<BusList> api_lists = entitites.filter( lib::isInstance(classof BusList) );
		
		Vector<BaseStruct> bus_methods = new Vector();
		bus_methods.appendVector( entitites.filter(lib::isInstance( classof BusMethod )) );
		
		for (int i=0; i<api_lists.count(); i++)
		{
			BusList api_list = api_lists.item(i);
			string class_name = api_list.className();
			if (class_name == "") continue;
			
			Collection<BusMethod> arr = static::getBusMethodsByClassName(class_name)
			arr = arr.map
			(
				BusMethod (BusMethod item) use (api_list) => item.copy
				{
					"object_name": api_list.object_name,
					"interface_name": (api_list.interface_name != "") ? api_list.interface_name : item.interface_name,
				}
			);
			bus_methods.appendVector(arr);
		}
		
		return bus_methods.toCollection();
	}
	
	
	
	/**
	 * Returns api methods by class name
	 */
	pure Collection<BusMethod> getBusMethodsByClassName(string class_name)
	{
		Vector<BusMethod> bus_methods = new Vector<BusMethod>();
		IntrospectionClass class_info = RuntimeUtils::getClassIntrospection(class_name);
		
		/* Get routes info */
		class_info.methods.each
		(
			void (Collection<BusMethod> annotations, string class_method_name) use (bus_methods, class_name)
			{
				annotations.each
				(
					void (BusMethod api_method) use (bus_methods, class_name, class_method_name)
					{
						if (api_method == null) return;
						if (api_method instanceof BusMethod)
						{
							bus_methods.pushValue
							(
								api_method.copy
								{
									"class_name": class_name,
									"class_method_name": class_method_name,
								}
							);
						}
					}
				);
			}
		);
		
		return bus_methods.toCollection();
	}
}