/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime.Backend;

use Runtime.BaseStruct;
use Runtime.Backend.ExternalBusDriver;
use Runtime.Backend.SystemBusDriver;
use Runtime.Core.Context;
use Runtime.Core.Driver;
use Runtime.Core.Entity;
use Runtime.Core.LambdaChain;
use Runtime.Core.LambdaChainDeclare;


static class ModuleDescription
{
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleName() => "Runtime.Backend";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleVersion() => "0.10.0";
	
	
	
	/**
	 * Returns required modules
	 * @return Dict<string>
	 */
	pure Dict<string> requiredModules() =>
	{
		'Runtime': '>=0.3',
		'Runtime.Web': '*',
	};
	
	
	
	/**
	 * Returns enities
	 */
	pure Collection<Dict> entities() => 
	[
		/* Register external bus driver */
		new Driver{ "name": "default:external_bus", "value": classof ExternalBusDriver },
		
		/* Register system bus driver */
		new Driver{ "name": "default:system_bus", "value": classof SystemBusDriver },
		
		/* Extend entities */
		new LambdaChain
		{
			"name": "Runtime.Entities",
			"value": "Runtime.Backend.ModuleDescription::extendEntities",
		},
	];
	
	
	
	/**
	 * Extend entities
	 */
	pure Collection<BaseStruct> extendEntities(Context c, Collection<BaseStruct> entities)
	{
		bool api = c |> "Runtime.Backend", "api" |> default bool true;
		string bus_class = c |> "Runtime.Backend", "external_bus_class" |> default string "";
		bool bus_default = c |> "Runtime.Backend", "external_bus_default" |> default bool true;
		
		/* Set default bus */
		if (bus_class == "" and bus_default)
		{
			bus_class = classof ExternalBusDriver;
		}
		
		/* Enable local bus provider */
		if (bus_class != "")
		{
			entities = entities.prependIm
			(
				new Driver{ "name": "default:external_bus", "value": bus_class }
			);
		}
		
		return [c, entities];
	}
	
}