/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime.Web.Backend;

use Runtime.Core.BusDriverInterface;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderDriver;
use Runtime.Web.Response;
use Runtime.Web.Backend.Pattern;


static class BackendHelper
{
	static const string BACKEND_API_PREPARE_CHAIN = "Runtime.Web.Backend.BackendHelper::BACKEND_API_PREPARE_CHAIN";
	
	
	
	/**
	 * Layout chain
	 */
	pure RenderContainer renderChainSetFrontendEnv(RenderContainer container)
	{
		container <= frontend_env <= "APP_MODE" <= @.env("APP_MODE", "prod");
		container <= frontend_env <= "X-APP-HASH" <= RenderDriver::getCssHash(@.main_class);
		container <= frontend_env <= "X-ROUTE-PREFIX" <= @.env("X-ROUTE-PREFIX", "");
		return [ container ];
	}
	
	
	
	/**
	 * Render chain. Set default pattern
	 */
	pure RenderContainer renderChainPatternDefault(RenderContainer container)
	{
		if (container.pattern_name == "default" and container.pattern_class == "" or container.pattern_class == "")
		{
			container <= pattern_class <= classof Pattern;
		}
		return [ container ];
	}
	
	
	
	/**
	 * Render chain
	 * Create layout model
	 */
	static RenderContainer renderChainCreateResponse(RenderContainer container)
	{
		if (container == null) return [ container ];
		if (container.isResponseExists()) return [ container ];
		
		/* Get params */
		LayoutModel layout = RenderDriver::chainLayout(container.layout);
		Dict params = {};
		
		/* Render layout */
		fn render = rtl::method(layout.layout_class, "render");
		string layout_content = render(layout, layout, {}, null);
		
		/* Render pattern */
		fn render = rtl::method(container.pattern_class, "render");
		string patter_content = render(container, layout, params, layout_content);
		
		/* Create response */
		container <= response <= new Response
		{
			"content": patter_content,
			"headers": container.new_headers,
			"http_code": container.new_http_code,
		};
		
		return [ container ];
	}
	
}